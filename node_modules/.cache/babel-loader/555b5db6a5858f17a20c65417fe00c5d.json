{"ast":null,"code":"var _jsxFileName = \"D:\\\\FYP demo\\\\src\\\\authContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { login, signup } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [userName, setUserName] = useState(\"\"); //Function to put JWT token in local storage.\n\n  const setToken = data => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  };\n\n  const authenticate = async (username, password) => {\n    const result = await login(username, password);\n\n    if (result.token) {\n      setToken(result.token);\n      setIsAuthenticated(true);\n      setUserName(username);\n    }\n  };\n\n  const register = async (username, password) => {\n    const result = await signup(username, password);\n    console.log(result.code);\n    return result.code == 201 ? true : false;\n  };\n\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      authenticate,\n      register,\n      signout,\n      userName\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"X7ml3v3wMgNBUcZnD5cFhL7zPIM=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/FYP demo/src/authContext.js"],"names":["React","useState","createContext","login","signup","AuthContext","AuthContextProvider","props","existingToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","authToken","setAuthToken","userName","setUserName","setToken","data","setItem","authenticate","username","password","result","token","register","console","log","code","signout","setTimeout","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,OAA9B;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC,IAAD,CAAjC;;AAEP,MAAMI,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAtB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACO,aAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC,CAJqC,CAMrC;;AACA,QAAMgB,QAAQ,GAAIC,IAAD,IAAU;AACzBT,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BD,IAA9B;AACAJ,IAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAME,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjD,UAAMC,MAAM,GAAG,MAAMpB,KAAK,CAACkB,QAAD,EAAWC,QAAX,CAA1B;;AACA,QAAIC,MAAM,CAACC,KAAX,EAAkB;AAChBP,MAAAA,QAAQ,CAACM,MAAM,CAACC,KAAR,CAAR;AACAZ,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAI,MAAAA,WAAW,CAACK,QAAD,CAAX;AACD;AACF,GAPD;;AASA,QAAMI,QAAQ,GAAG,OAAOJ,QAAP,EAAiBC,QAAjB,KAA8B;AAC7C,UAAMC,MAAM,GAAG,MAAMnB,MAAM,CAACiB,QAAD,EAAWC,QAAX,CAA3B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,IAAnB;AACA,WAAQL,MAAM,CAACK,IAAP,IAAe,GAAhB,GAAuB,IAAvB,GAA8B,KAArC;AACD,GAJD;;AAMA,QAAMC,OAAO,GAAG,MAAM;AACpBC,IAAAA,UAAU,CAAC,MAAMlB,kBAAkB,CAAC,KAAD,CAAzB,EAAkC,GAAlC,CAAV;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,eADK;AAELS,MAAAA,YAFK;AAGLK,MAAAA,QAHK;AAILI,MAAAA,OAJK;AAKLd,MAAAA;AALK,KADT;AAAA,cASGR,KAAK,CAACwB;AATT;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5CD;;GAAMzB,mB;;KAAAA,mB;AA8CN,eAAeA,mBAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport { login, signup } from \"./api\";\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const existingToken = localStorage.getItem(\"token\");\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [authToken, setAuthToken] = useState(existingToken);\r\n  const [userName, setUserName] = useState(\"\");\r\n\r\n  //Function to put JWT token in local storage.\r\n  const setToken = (data) => {\r\n    localStorage.setItem(\"token\", data);\r\n    setAuthToken(data);\r\n  }\r\n\r\n  const authenticate = async (username, password) => {\r\n    const result = await login(username, password);\r\n    if (result.token) {\r\n      setToken(result.token)\r\n      setIsAuthenticated(true);\r\n      setUserName(username);\r\n    }\r\n  };\r\n\r\n  const register = async (username, password) => {\r\n    const result = await signup(username, password);\r\n    console.log(result.code);\r\n    return (result.code == 201) ? true : false;\r\n  };\r\n\r\n  const signout = () => {\r\n    setTimeout(() => setIsAuthenticated(false), 100);\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        authenticate,\r\n        register,\r\n        signout,\r\n        userName\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}