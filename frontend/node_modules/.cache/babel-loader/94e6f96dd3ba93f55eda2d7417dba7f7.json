{"ast":null,"code":"import { HISTORY_ADD_REQUEST, HISTORY_ADD_SUCCESS, HISTORY_ADD_FAIL, HISTORY_REQUEST, HISTORY_SUCCESS, HISTORY_FAIL } from \"../constants/historyConstants\";\nimport axios from \"axios\";\nexport const addToHistoryAction = (id, user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HISTORY_ADD_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/history/goods/${id}`, user, config);\n    dispatch({\n      type: HISTORY_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: HISTORY_ADD_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listMyHistory = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HISTORY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/history/myHISTORY`, config);\n    dispatch({\n      type: HISTORY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: HISTORY_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/FYP demo/frontend/src/actions/historyAction.js"],"names":["HISTORY_ADD_REQUEST","HISTORY_ADD_SUCCESS","HISTORY_ADD_FAIL","HISTORY_REQUEST","HISTORY_SUCCESS","HISTORY_FAIL","axios","addToHistoryAction","id","user","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","error","message","response","listMyHistory","get"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,mBAFJ,EAGIC,gBAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,YANJ,QAOS,+BAPT;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAe,OAAOC,QAAP,EAAgBC,QAAhB,KAA6B;AAC1E,MAAI;AACFD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIA,UAAM;AACJa,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AADjC;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAY,sBAAqBZ,EAAG,EAApC,EAAuCC,IAAvC,EAA6CM,MAA7C,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEX,mBADC;AAEPoB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GArBD,CAqBE,OAAOG,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAb,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEV,gBADC;AAEPmB,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID;AACF,CAhCI;AAkCL,OAAO,MAAME,aAAa,GAAE,MAAM,OAAOf,QAAP,EAAiBC,QAAjB,KAA8B;AAC9D,MAAI;AACFD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,UAAM;AACJU,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFH,QAAQ,EAFZ;AAGA,UAAMI,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AADjC;AADI,KAAf;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACoB,GAAN,CAAW,wBAAX,EAAoCX,MAApC,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER,eAAR;AAAyBiB,MAAAA,OAAO,EAAEF;AAAlC,KAAD,CAAR;AACD,GAbD,CAaE,OAAOG,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,YADC;AAEPgB,MAAAA,OAAO,EACLC,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC;AALL,KAAD,CAAR;AAOD;AACF,CAvBM","sourcesContent":["import {\r\n    HISTORY_ADD_REQUEST,\r\n    HISTORY_ADD_SUCCESS,\r\n    HISTORY_ADD_FAIL,\r\n    HISTORY_REQUEST,\r\n    HISTORY_SUCCESS,\r\n    HISTORY_FAIL,\r\n  } from \"../constants/historyConstants\";\r\nimport axios from \"axios\";\r\n\r\nexport const addToHistoryAction = (id ,user ) => async (dispatch,getState) => {\r\n    try {\r\n      dispatch({\r\n        type: HISTORY_ADD_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.post(`/api/history/goods/${id}`, user, config);\r\n  \r\n      dispatch({\r\n        type: HISTORY_ADD_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({\r\n        type: HISTORY_ADD_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n\r\n  export const listMyHistory= () => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: HISTORY_REQUEST })\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      }\r\n      const { data } = await axios.get(`/api/history/myHISTORY`, config)\r\n  \r\n      dispatch({ type: HISTORY_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      dispatch({\r\n        type: HISTORY_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      })\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}